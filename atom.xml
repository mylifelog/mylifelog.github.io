<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://mylifelog.github.io</id>
    <title>静水流深</title>
    <updated>2019-09-13T06:32:03.241Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://mylifelog.github.io"/>
    <link rel="self" href="https://mylifelog.github.io/atom.xml"/>
    <subtitle>闷声学大习！</subtitle>
    <logo>https://mylifelog.github.io/images/avatar.png</logo>
    <icon>https://mylifelog.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, 静水流深</rights>
    <entry>
        <title type="html"><![CDATA[Android NDK层校验APK文件MD5]]></title>
        <id>https://mylifelog.github.io/post/android-ndk-ceng-xiao-yan-apk-wen-jian-md5</id>
        <link href="https://mylifelog.github.io/post/android-ndk-ceng-xiao-yan-apk-wen-jian-md5">
        </link>
        <updated>2019-09-09T01:54:53.000Z</updated>
        <summary type="html"><![CDATA[<p>除了校验证书，我们还可以校验Apk文件的md5值，进一步增加App的安全性。具体思路是通过jni接口从网络获取我们发布版的md5值，然后在native层进行比对校验。</p>
]]></summary>
        <content type="html"><![CDATA[<p>除了校验证书，我们还可以校验Apk文件的md5值，进一步增加App的安全性。具体思路是通过jni接口从网络获取我们发布版的md5值，然后在native层进行比对校验。</p>
<!-- more -->
<p><strong>获取当前apk文件路径的代码：</strong></p>
<pre><code class="language-cpp">    //得到 getPackageName 方法的 ID
    jmethodID methodID_path = (*env)-&gt;GetMethodID(env,activity,&quot;getPackageResourcePath&quot;, &quot;()Ljava/lang/String;&quot;);
    //获取包路径
    jstring path_str = (jstring)((*env)-&gt;CallObjectMethod(env,context, methodID_path));
    const char *apkPath = (*env)-&gt;GetStringUTFChars(env, path_str, 0);
</code></pre>
<p><strong>也可以不使用java层的函数获取路径：</strong></p>
<pre><code class="language-cpp">static char *getPackageName() {
    const size_t BUFFER_SIZE = 256;
    char buffer[BUFFER_SIZE] = &quot;&quot;;
    int fd = open(&quot;/proc/self/cmdline&quot;, O_RDONLY);
    if (fd &gt; 0) {
        ssize_t r = read(fd, buffer, BUFFER_SIZE - 1);
        close(fd);
        if (r &gt; 0) {
            return strdup(buffer);
        }
    }
    return NULL;
}

static const char *getFilenameExt(const char *filename) {
    const char *dot = strrchr(filename, '.');
    if (!dot || dot == filename) return &quot;&quot;;
    return dot + 1;
}

char *pathHelperGetPath() {
    char *package = getPackageName();
    if (NULL == package) {
        return NULL;
    }

    FILE *fp = fopen(&quot;/proc/self/maps&quot;, &quot;r&quot;);
    if (NULL == fp) {
        free(package);
        return NULL;
    }
    const size_t BUFFER_SIZE = 256;
    char buffer[BUFFER_SIZE] = &quot;&quot;;
    char path[BUFFER_SIZE] = &quot;&quot;;

    bool find = false;
    while (fgets(buffer, BUFFER_SIZE, fp)) {
        if (sscanf(buffer, &quot;%*llx-%*llx %*s %*s %*s %*s %s&quot;, path) == 1) {
            if (strstr(path, package)) {
                char *bname = basename(path);
                NSV_LOGI(&quot;check basename[%s]&quot;, bname);
                if (strcasecmp(getFilenameExt(bname), &quot;apk&quot;) == 0) {
                    find = true;
                    break;
                }
            }
        }
    }
    fclose(fp);
    free(package);
    if (find) {
        return strdup(path);
    }
    return NULL;
}
</code></pre>
<p><strong>在Native层计算当前Apk文件的md5值关键代码：</strong></p>
<pre><code class="language-cpp">void getFileMD5(const char* file_name, char* md5) {
    unsigned char output[16];
	FILE *f = fopen(file_name, &quot;rb&quot;);
	if (f != NULL){
		fseek(f, 0, SEEK_END);
		int m_length = ftell(f);
		if (m_length != -1) {
			fseek(f, 0, SEEK_SET);
        	unsigned char* m_content = (unsigned char *)malloc(sizeof(unsigned char) * m_length);
        	if (fread(m_content, 1, m_length, f) == m_length) {
        	    mbedtls_md5(m_content, (size_t)(sizeof(unsigned char) * m_length), output);
                int i;
                for (i = 0; i &lt; 16; i++) {
                    sprintf(md5, &quot;%02X&quot;, output[i]);
                    md5 += 2;
                }
                *md5 = '\0';
        	}
		}
        fclose(f);
	}
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ Android NDK层校验签名（二）]]></title>
        <id>https://mylifelog.github.io/post/android-ndk-ceng-xiao-yan-qian-ming-er</id>
        <link href="https://mylifelog.github.io/post/android-ndk-ceng-xiao-yan-qian-ming-er">
        </link>
        <updated>2019-09-09T01:30:03.000Z</updated>
        <summary type="html"><![CDATA[<p>针对kstools和MT管理器等破坏我们签名校验的手段，我们需要采取新的措施。这些方法的原理都是hook应用的pms服务，拦截其获取真正签名的方法，然后返回让我们误以为真的签名信息。</p>
]]></summary>
        <content type="html"><![CDATA[<p>针对kstools和MT管理器等破坏我们签名校验的手段，我们需要采取新的措施。这些方法的原理都是hook应用的pms服务，拦截其获取真正签名的方法，然后返回让我们误以为真的签名信息。</p>
<!-- more -->
<p>那么解决思路就是，不使用pms服务获取证书信息。原理就是读取当前app所在目录的apk文件，使用zlib解压包然后计算META-INF/.RSA的MD5信息和我们自己的对比校验。</p>
<p>关键代码如下：</p>
<pre><code class="language-cpp">/*PKCS7结构
*contentInfo : SEQUENCE
*	contentType : ObjectIdentifier  {data|signedData|envelopedData|signedAndEnvelopedData|digestedData|encryptedData}
* 	content		#内容由contentType决定
*
*contentInfo : SEQUENCE
*	contentType : ObjectIdentifier  {data}
	content : OCTETSTRING
*
*contentInfo : SEQUENCE
*	contentType : ObjectIdentifier  {signedData}
*	content[optional] : SEQUENCE 							#CERT.RSA是属于signedData类型
*		version : INTEGER 
*		digestAlgorithms : SET : DigestAlgorithmIdentifier  #消息摘要的算法
*		contentInfo : SEQUENCE   							#整个文件也是contentInfo结构
*		certificates[optional] : SEQUENCE 					#证书信息
*			tbsCertificate : SEQUENCE #
*				version : INTEGER
*				serialNumber : INTEGER  					#证书的序列号，由证书颁布者和序列号可以唯一确定证书
*				signature ： SEQUENCE : AlgorithmIdentifier
*				issuer : SET 								#证书颁布者
*				validity : SEQUENCE    						#证书的有效期
*				subject : SET #证书主体
*				subjectPublicKeyInfo : SEQUENCE 			#公钥相关信息，包含有加密算法和公钥
*				issuerUniqueID[optional] : BITSTRING 
*				subjectUniqueID[optional] : BITSTRING 
*				extensions[optional] : SEQUENCE  			#保存有证书扩展信息
*			signatureAlgorithm : AlgorithmIdentifier 		#签名算法 ，如常用的有 SHA256withRSA
*			signatureValue : BITSTRING 						#这是tbsCertificate部分的数字签名信息，防止tbsCertificate内容被修改
*		crls[optional] : SET 								#证书吊销列表
*		signerInfos : SET
			signerInfo : SEQUENCE							#签名者信息
*				version : INTEGER
*				issuerAndSerialNumber : SEQUENCE 			#证书的颁布者和序列号
*				digestAlgorithmId : SEQUENCE : DigestAlgorithmIdentifier #消息摘要的算法
*				authenticatedAttributes[optional] 
*				digestEncryptionAlgorithmId : SEQUENCE 			#签名算法
*				encryptedDigest : OCTETSTRING   			#私钥加密后的数据
*				unauthenticatedAttributes[optional] 
*
*每项的保存形式为{tag，length，content}
*/

#include &quot;pkcs7.h&quot;

/**
 * 构造函数，必须提供签名证书文件或者apk文件
 */
pkcs7::pkcs7()
{
	m_content = NULL;
	head = tail = NULL;
	p_cert = p_signer = NULL;
	m_pos = m_length = 0;
	apk_file = cert_file = NULL;
	
}

bool pkcs7::open_file(char *file_name)
{
	bool ret = get_content(file_name);
	if (ret == false) {
		printf(&quot;The file format is error!\n&quot;);
		return ret;
	}
	ret = parse_pkcs7();
	if (ret == false) {
		printf(&quot;parse the pkcs7 format error!\n&quot;);
		print();
		return ret;
	}
	return true;
}

pkcs7::~pkcs7()
{
	element *p = head;
	while (p != NULL) {
		head = p-&gt;next;
		free(p);
		p = head;
	}
	free(m_content);
	if (apk_file != NULL)
		free(apk_file);
	if (cert_file != NULL)
		free(cert_file);
}

/**
 * 该函数用于从apk中获取签名证书文件，  META-INF/*.[RSA|DSA|EC]。
 * 若找到将该文件内容保存在m_content中，m_length为其长度
 *
 * 使用minizip库， 1）unzOpen64 打开apk文件；
 *                 2）unzGetGlobalInfo64 获取文件总数；
                   3）unzGoFirstFile 和 unzGoToNextFile 遍历文件；
				   4）unzGetCurrentFileInfo64 获取当前文件信息，对比找到签名证书文件；
				   5）unzOpenCurrentFilePass 打开当前文件；
				   6）unzReadCurrentFile 读取当前文件内容；
				   7）unzCloseCurrentFile 关闭当前文件；
				   8）unzClose 关闭apk文件。
 */
bool pkcs7::get_from_apk(char *file_name)
{
	unzFile uf = NULL;
	unz_file_info64 file_info;
	char filename_inzip[256];
	int err;
	
	uf = unzOpen64(file_name);
	if (uf == NULL) {
		printf(&quot;open apk file error!\n&quot;);
		return false;
	}
	apk_file = (char *)malloc(sizeof(char) * (strlen(file_name) + 1));
	strcpy(apk_file, file_name);

	unz_global_info64 gi;
	err = unzGetGlobalInfo64(uf, &amp;gi); 
	if (err != UNZ_OK) {
		printf(&quot;error %d with zipfile in unzGetGlobalInfo \n&quot;, err);
		return false;
	}
	err = unzGoToFirstFile(uf);
	int i;
	for (i = 0; i&lt; gi.number_entry; i++) {
		if (err != UNZ_OK) {
			printf(&quot;get file error!\n&quot;);
			return false;
		}
		if (unzGetCurrentFileInfo64(uf, &amp;file_info, filename_inzip, sizeof(filename_inzip), NULL, 0, NULL, 0))
		{
			printf(&quot;get file infomation error!\n&quot;);
			return false;
		}
		int name_len = strlen(filename_inzip);
		if (name_len != file_info.size_filename) {
			printf(&quot;file name length is not right!\n&quot;);
			return false;
		}
		if (name_len &gt; 13) {// &quot;META-INF/*.RSA&quot;
			if ((!strncmp(filename_inzip, &quot;META-INF/&quot;, 9)) &amp;&amp;
				(!STRCASECMP(filename_inzip + name_len - 4, &quot;.RSA&quot;) ||
				!STRCASECMP(filename_inzip + name_len - 4, &quot;.DSA&quot;) ||
				!STRCASECMP(filename_inzip + name_len - 3, &quot;.EC&quot;)))
			{
				cert_file = (char *)malloc(sizeof(char) * (name_len + 1));
				strcpy(cert_file, filename_inzip);
				break;
			}
		}
		err = unzGoToNextFile(uf);
	}
	if (i == gi.number_entry) {
		printf(&quot;cannot find the file!\n&quot;);
		return false;
	}

	err = unzOpenCurrentFilePassword(uf, NULL);
	if (err != UNZ_OK) {
		printf(&quot;open current error!\n&quot;);
		return  false;
	}
	/*获取文件内容*/
	m_length = file_info.uncompressed_size;
	if (m_length &lt;= 0)
		return false;
	m_content = (unsigned char *)malloc((size_t)(m_length));
	err = unzReadCurrentFile(uf, m_content, m_length);
	if (err != file_info.uncompressed_size) {
		printf(&quot;read content error!\n&quot;);
		return false;
	}
	unzCloseCurrentFile(uf);
	unzClose(uf);
	return true;
}

/**
 * 获取签名文件内容，支持：1）直接提供的是签名文件；2）apk压缩文件。
 */

bool pkcs7::get_content(char *file_name)
{
	int name_len = strlen(file_name);
	if (name_len &lt; 4)
		return false;
	if (!STRCASECMP(file_name + name_len - 4, &quot;.RSA&quot;) ||
		!STRCASECMP(file_name + name_len - 4, &quot;.DSA&quot;) ||
		!STRCASECMP(file_name + name_len - 3, &quot;.EC&quot;)) {
			FILE *f = fopen(file_name, &quot;rb&quot;);
			if (f == NULL)
				return false;
			fseek(f, 0, SEEK_END);
			m_length = ftell(f);
			if (m_length == -1)
				return false;
			fseek(f, 0, SEEK_SET);
			m_content = (unsigned char *)malloc(sizeof(unsigned char) * m_length);
			if (fread(m_content, 1, m_length, f) != m_length)
				return false;
			return true;
		}
	return get_from_apk(file_name);
}

/**
 * 根据lenbyte计算出 length所占的字节个数， 1）字节最高位为1，则低7位长度字节数；2）最高位为0，则lenbyte表示长度
 */
int pkcs7::len_num(unsigned char lenbyte)
{
	int num = 1;
	if (lenbyte &amp; 0x80) {
		num += lenbyte &amp; 0x7f;
	}
	return num;
}
/**
 * 将长度信息转化成ASN.1长度格式
 * len &lt;= 0x7f       1
 * len &gt;= 0x80       1 + 非零字节数
 */
int pkcs7::num_from_len(int len)
{
	int num = 0;
	int tmp = len;
	while (tmp) {
		num++;
		tmp &gt;&gt;= 8;
	}
	if ((num == 1 &amp;&amp; len &gt;= 0x80) || (num &gt; 1))
		num += 1;
	return num;
}

/**
 *每个element元素都是{tag, length, data}三元组，tag和length分别由tag和len保存，data是由[begin, begin+len)保存。
 *
 *该函数是从data位置计算出到tag位置的偏移值
 */
int pkcs7::tag_offset(element *p)
{
	if (p == NULL)
		return 0;
	int offset = num_from_len(p-&gt;len);
	if (m_content[p-&gt;begin - offset - 1] == p-&gt;tag)
		return offset + 1;
	else	
		return 0;
}

/**
 * 将length转化DER结构的长度表示，存放在buffer位置
 *
 * 返回 写入字节的个数
*/
int pkcs7::put_length(unsigned char *buffer, int length)
{
	int lenbyte = num_from_len(length);
	int ret = lenbyte;
	if (lenbyte == 1) 
		buffer[0] = length;
	else {
		lenbyte--;
		buffer[0] = 0x80 | lenbyte;
		while (lenbyte) {
			buffer[lenbyte] = length &amp; 0xff;
			lenbyte--;
			length &gt;&gt;= 8;
		}
	}
	return ret;
}

/**
 * 根据lenbyte计算长度信息，算法是 lenbyte最高位为1， 则lenbyte &amp; 0x7F表示length的字节长度，后续字节使用大端方式存放
 * 最高位为0， lenbyte直接表示长度
 *
 * 1)若 0x82 0x34 0x45 0x22 ....  0x82是lenbyte， 高位为1，0x82 &amp; 0x7F == 2，则后续两个字节是高端存放的长度信息
    则长度信息为 0x3445
   2)若 lenbyte == 0x34， 最高位为0， 则长度信息是0x34
*/
int pkcs7::get_length(unsigned char lenbyte, int offset)
{
	int len = 0, num;
	unsigned char tmp;
	if (lenbyte &amp; 0x80) {
		num = lenbyte &amp; 0x7f;
		if (num &lt; 0 || num &gt; 4) {
			printf(&quot;its too long !\n&quot;);
			return 0;
		}
		while (num) {
			len &lt;&lt;= 8;
			tmp = m_content[offset++];
			len += (tmp &amp; 0xff);
			num--;
		}
	} else {
		len = lenbyte &amp; 0xff;
	}
	return len;
}

/**
 * 解析证书中的日期信息
 */
bool pkcs7::parse_time(element *p_val)
{
	if (p_val == NULL || strcmp(p_val-&gt;name, &quot;validity&quot;) || p_val-&gt;tag != TAG_SEQUENCE)
		return false;
	int pos = p_val-&gt;begin;
	unsigned char tag;
	int len, base;
	int year, month, day, hour, minute, second;
	for (int i = 0; i &lt; 2; i++) {
		tag = m_content[pos++];
		len = m_content[pos++];
		base = pos;
		if (tag != TAG_UTCTIME &amp;&amp; tag != TAG_GENERALIZEDTIME)
			return false;
		if (tag == TAG_UTCTIME) {
			if (len &lt; 11 || len &gt; 17)
				return false;
			year = 10 * (m_content[pos++] - '0');
			year += (m_content[pos++] - '0');
			if (year &lt; 50)
				year += 2000;
			else 
				year += 1900;
			
		} 
		else if (tag == TAG_GENERALIZEDTIME) {
			if (len &lt; 13 || len &gt; 23)
				return false;
			year = 1000 * (m_content[pos++] - '0');
			year += (100 * (m_content[pos++] - '0'));
			year += (10 * (m_content[pos++] - '0'));
			year += (m_content[pos++] - '0');
		} 
		month = 10 * (m_content[pos++] - '0');
		month += (m_content[pos++] - '0');
		
		day = 10 * (m_content[pos++] - '0');
		day += (m_content[pos++] - '0');
		
		hour = 10 * (m_content[pos++] - '0');
		hour += (m_content[pos++] - '0');
		
		minute = 10 * (m_content[pos++] - '0');
		minute += (m_content[pos++] - '0');
		
		if (len - pos + base &gt; 2) {
			second = 10 *(m_content[pos++] - '0');
			second += (m_content[pos++] - '0');
		}
		pos = base + len;
		if (i == 0) 
			printf(&quot;Not Before: &quot;);
		else
			printf(&quot;Not After : &quot;);
		printf(&quot;%d-%02d-%02d %02d:%02d:%02d\n&quot;, year, month, day, hour, minute, second);
	} 
	return true;
}

/**
 *根据名字找到pkcs7中的元素, 若没有找到返回NULL.
 *name: 名字，可以只提供元素名字前面的字符
 *begin: 查找的开始位置
 */
element *pkcs7::get_element(const char *name, element *begin)
{
	if (begin == NULL)
		begin = head;
	element *p = begin;
	while (p != NULL) {
		if (strncmp(p-&gt;name, name, strlen(name)) == 0)
			return p;
		p = p-&gt;next;
	}
	printf(&quot;not found the \&quot;%s\&quot;\n&quot;, name);
	return p;
}

/**
 * 创建element.pkcs7中的每个元素都有对应element.
 */
int pkcs7::create_element(unsigned char tag, char *name, int level)
{
	unsigned char get_tag = m_content[m_pos++];
	if (get_tag != tag) {
		m_pos--;
		return -1;
	}
	unsigned char lenbyte = m_content[m_pos];
	int len = get_length(lenbyte, m_pos + 1);
	m_pos += len_num(lenbyte);
	
	element *node = (element *)malloc(sizeof(element));
	node-&gt;tag = get_tag;
	strcpy(node-&gt;name, name);
	node-&gt;begin = m_pos;
	node-&gt;len = len;
	node-&gt;level = level;
	node-&gt;next = NULL;
	
	if (head == NULL) {
		head = tail = node;
	} else {
		tail-&gt;next = node;
		tail = node;
	}
	return len;
}

/**
 * 解析证书信息
 */
bool  pkcs7::parse_certificate(int level)
{
	char *names[] = {
		&quot;tbsCertificate&quot;,
				&quot;version&quot;,
				&quot;serialNumber&quot;,
				&quot;signature&quot;,
				&quot;issuer&quot;,
				&quot;validity&quot;,
				&quot;subject&quot;,
				&quot;subjectPublicKeyInfo&quot;,
				&quot;issuerUniqueID-[optional]&quot;,
				&quot;subjectUniqueID-[optional]&quot;,
				&quot;extensions-[optional]&quot;,
		&quot;signatureAlgorithm&quot;,
		&quot;signatureValue&quot; };
	int len = 0;
	unsigned char tag;
	bool have_version = false;
	len = create_element(TAG_SEQUENCE, names[0], level);
	if (len == -1 || m_pos + len &gt; m_length) {
		return false;
	}
	//version
	tag = m_content[m_pos];
	if (((tag &amp; 0xc0) == 0x80) &amp;&amp; ((tag &amp; 0x1f) == 0)) {
		m_pos += 1;
		m_pos += len_num(m_content[m_pos]);
		len = create_element(TAG_INTEGER, names[1], level + 1);
		if (len == -1 || m_pos + len &gt; m_length) {
			return false;
		}
		m_pos += len;
		have_version = true;
	}

	for (int i = 2; i &lt; 11; i++) {
		switch (i) {
			case 2: 
					tag = TAG_INTEGER;
					break;
			case 8:	
					tag = 0xA1;
					break;
			case 9:	
					tag = 0xA2;
					break;
			case 10:
					tag = 0xA3;
					break;
			default:
					tag = TAG_SEQUENCE;
		}
		len = create_element(tag, names[i], level + 1);
		if (i &lt; 8 &amp;&amp; len == -1) {
			return false;
		}
		if (len != -1)
			m_pos += len;
	}
	//signatureAlgorithm
	len = create_element(TAG_SEQUENCE, names[11], level);
	if (len == -1 || m_pos + len &gt; m_length) {
		return false;
	}
	m_pos += len;
	//signatureValue
	len = create_element(TAG_BITSTRING, names[12], level);
	if (len == -1 || m_pos + len &gt; m_length) {
		return false;
	}
	m_pos += len;
	return true;
}

/**
 * 解析签名者信息
 */
bool pkcs7::parse_signerInfo(int level)
{
	char *names[] = {
		&quot;version&quot;,
		&quot;issuerAndSerialNumber&quot;,
		&quot;digestAlgorithmId&quot;,
		&quot;authenticatedAttributes-[optional]&quot;,
		&quot;digestEncryptionAlgorithmId&quot;,
		&quot;encryptedDigest&quot;,
		&quot;unauthenticatedAttributes-[optional]&quot; };
	int len;
	unsigned char tag;
	for (int i = 0; i &lt; sizeof(names)/sizeof(names[0]); i++) {
		switch (i) {
			case 0:
					tag = TAG_INTEGER;
					break;
			case 3:
					tag = 0xA0;
					break;
			case 5:
					tag = TAG_OCTETSTRING;
					break;
			case 6:
					tag = 0xA1;
					break;
			default:
					tag = TAG_SEQUENCE;
			
		}
		len = create_element(tag, names[i], level);
		if (len == -1 || m_pos + len &gt; m_length) {
			if (i == 3 || i == 6)
				continue;
			return false;
		}
		m_pos += len;
	}
	int ret = (m_pos == m_length ? 1 : 0);
	return true;
}

/**
 * 解析 contentType == signedData 的content部分
 */
bool pkcs7::parse_content(int level)
{
	
	char *names[] = {&quot;version&quot;, 
					&quot;DigestAlgorithms&quot;,
					&quot;contentInfo&quot;,
					&quot;certificates-[optional]&quot;,
					&quot;crls-[optional]&quot;,
					&quot;signerInfos&quot;,
					&quot;signerInfo&quot;};

	unsigned char tag;
	int len = 0;	
	element *p = NULL;
	//version
	len = create_element(TAG_INTEGER, names[0], level);
	if (len == -1 || m_pos + len &gt; m_length) {
		return false;
	}
	m_pos += len;
	//DigestAlgorithms
	len = create_element(TAG_SET, names[1], level);
	if (len == -1 || m_pos + len &gt; m_length) {
		return false;
	}
	m_pos += len;
	//contentInfo
	len = create_element(TAG_SEQUENCE, names[2], level);
	if (len == -1 || m_pos + len &gt; m_length) {
		return false;
	}
	m_pos += len;
	//certificates-[optional]
	tag = m_content[m_pos];
	if (tag == TAG_OPTIONAL) {
		m_pos++;
		m_pos += len_num(m_content[m_pos]);
		len = create_element(TAG_SEQUENCE, names[3], level);
		if (len == -1 || m_pos + len &gt; m_length) {
			return false;
		}
		p_cert = tail;
		bool ret = parse_certificate(level + 1);
		if (ret == false) {
			return ret;
		}
	}
	//crls-[optional]
	tag = m_content[m_pos];
	if (tag == 0xA1) {
		m_pos++;
		m_pos += len_num(m_content[m_pos]);
		len = create_element(TAG_SEQUENCE, names[4], level);
		if (len == -1 || m_pos + len &gt; m_length) {
			return false;
		}
		m_pos += len;
	}
	//signerInfos
	tag = m_content[m_pos];
	if (tag != TAG_SET) {
		return false;
	} 
	len = create_element(TAG_SET, names[5], level);
	if (len == -1 || m_pos + len &gt; m_length) {
		return false;
	}
	//signerInfo
	len = create_element(TAG_SEQUENCE, names[6], level + 1);
	if (len == -1 || m_pos + len &gt; m_length) {
			return false;
		}
	p_signer = tail;
	return parse_signerInfo(level + 2);
}

/**
 * 解析文件开始函数
 */
bool pkcs7::parse_pkcs7()
{
	unsigned char tag, lenbyte;
	int len = 0;
	int level = 0;
	tag = m_content[m_pos++];
	if (tag != TAG_SEQUENCE) {
		printf(&quot;not found the Tag indicating an ASN.1!\n&quot;);
		return false;
	}
	lenbyte = m_content[m_pos];
	len = get_length(lenbyte, m_pos + 1);
	m_pos += len_num(lenbyte);
	if (m_pos + len &gt; m_length)
		return false;
	//contentType 
	len = create_element(TAG_OBJECTID, &quot;contentType&quot;, level);
	if (len == -1) {
		printf(&quot;not found the ContentType!\n&quot;);
		return false;
	}
	m_pos += len;	
	//optional
	tag = m_content[m_pos++];
	lenbyte = m_content[m_pos];
	m_pos += len_num(lenbyte);
	//content-[optional]
	len = create_element(TAG_SEQUENCE, &quot;content-[optional]&quot;, level);
	if (len == -1) {
		printf(&quot;not found the content!\n&quot;);
		return false;
	}
	return parse_content(level + 1);
}

/**
 * 打印输出各个部分的文件偏移以及长度
*/
void pkcs7::print()
{
	printf(&quot;-----------------------------------------------------------------------\n&quot;);
	printf(&quot; name                                          offset        length\n&quot;);
	printf(&quot; ======================================== =============== =============\n&quot;);
	element *p = head;
	while (p != NULL) {
		for (int i = 0; i &lt; p-&gt;level; i++)
			printf(&quot;    &quot;);
		printf(&quot; %s&quot;, p-&gt;name);
		for (int i = 0; i &lt; 40 - strlen(p-&gt;name) - 4*p-&gt;level; i++)
			printf(&quot; &quot;);
		printf(&quot;%6d(0x%02x)&quot;, p-&gt;begin, p-&gt;begin);
		int num = 0;
		int size = p-&gt;begin;
		while (size) {
			num += 1;
			size &gt;&gt;= 4;
		}
		if (num &lt; 2) num = 2;
		for (int i = 0; i &lt; 8 - num; i++)
			printf(&quot; &quot;);
		printf(&quot;%4d(0x%02x)\n&quot;, p-&gt;len, p-&gt;len);
		p = p-&gt;next;
	}
	printf(&quot;-----------------------------------------------------------------------\n&quot;);
}


/**
 * 获取证书信息的MD5
 */
char *pkcs7::get_MD5()
{
	if (p_cert == NULL) 
		return NULL;
	static char ret_md5[33]; //静态字符数组，被放入在全局数据区，只申请一次，不用担心内存泄露
	unsigned char md5[16];
	int offset = tag_offset(p_cert);
	if (offset == 0) {
		printf(&quot;get offset error!\n&quot;);
		return NULL;
	}
	mbedtls_md5(m_content + p_cert-&gt;begin - offset, p_cert-&gt;len + offset, md5);
	for (int i = 0; i &lt; 16; i++) {
		unsigned char byte = md5[i];
		char high = (((byte &gt;&gt; 4) &gt;= 10) ? ((byte &gt;&gt; 4) - 10 + 'A') : ((byte &gt;&gt; 4) + '0'));
		char low = (((byte &amp; 0x0F) &gt;= 10) ? ((byte &amp; 0x0F) - 10 + 'A') : ((byte &amp; 0x0F) + '0'));
		ret_md5[i*2] = high;
		ret_md5[i*2+1] = low;
	}
	ret_md5[32] = '\0';
	return ret_md5;
}

/**
 * 对签名证书修改后，重新打包生成新的apk
 *
 * minizip中没有删除文件的功能，因此就需要重新创建压缩文件，将之前的文件添加进去
 *       zipOpen64                  创建新的apk文件；
 *       zipOpenNewFileInZip64      添加新的文件；
 *       zipWriteInFileInZip        写入文件内容；
 *       zipCloseFileInZip          关闭当前文件；
 *       zipClose                   关闭apk文件。
 */
bool pkcs7::save_apk(unsigned char *buffer, int length,  const char *save_name)
{
	
	unsigned char *tmp = (unsigned char *)malloc(102400);   //10M
	int tmp_size = 102400;
	zipFile zf = zipOpen64(save_name, APPEND_STATUS_CREATE);
	char filename_inzip[256];
	unz_file_info64 file_info;
	if (zf != NULL) {
		unzFile uf = unzOpen64(apk_file);
		if (uf == NULL) {
			printf(&quot;open apk file error!\n&quot;);

			return false;
		}
		int err = unzGoToFirstFile(uf);
		while (err == UNZ_OK) {
			if (UNZ_OK != unzGetCurrentFileInfo64(uf, &amp;file_info, filename_inzip, sizeof(filename_inzip), NULL, 0, NULL, 0))
			{
				printf(&quot;get file infomation error!\n&quot;);
				free(tmp);
				return false;
			}
			if (!strcmp(filename_inzip, cert_file)) {
				zipOpenNewFileInZip64(zf, cert_file, NULL, NULL, 0, NULL, 0, NULL, Z_DEFLATED, Z_BEST_COMPRESSION, 0);
				zipWriteInFileInZip(zf, buffer, length);
				zipCloseFileInZip(zf);
			}
			else {
				err = unzOpenCurrentFile(uf);
				if (err != UNZ_OK) {
					free(tmp);
					return false;
				}
				if (file_info.uncompressed_size &gt; tmp_size) {
					free(tmp);
					tmp_size = file_info.uncompressed_size;
					tmp = (unsigned char *)malloc(tmp_size);	
				}
				err = unzReadCurrentFile(uf, tmp, file_info.uncompressed_size);
				if (err != file_info.uncompressed_size) {
					printf(&quot;read content error!\n&quot;);
					free(tmp);
					return false;
				}
				unzCloseCurrentFile(uf);
				zipOpenNewFileInZip64(zf, filename_inzip, NULL, NULL, 0, NULL, 0, NULL, Z_DEFLATED, Z_BEST_SPEED, 0);
				zipWriteInFileInZip(zf, tmp, file_info.uncompressed_size);
				zipCloseFileInZip(zf);
			}
			err = unzGoToNextFile(uf);
		}
		zipClose(zf, NULL);
		free(tmp);
		return true;
	}
	free(tmp);
	return false;
}

/**
 * 更改签名证书文件内部contentInfo的 contentType，默认是DATA_OID，可以更改为OLD_DATA_OID
 *
 * DATA_OID = {1, 2, 840, 113549, 1, 7, 1}
 * OLD_DATA_OID = {1, 2, 840, 1113549, 1, 7, 1}
 *
 * type = 0 设置成DATA_OID  签名证书文件默认为这个
 * type = 1 设置成OLD_DATA_OID
 */

bool pkcs7::change_contentType(int type)
{
	int data_oid[] = { 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x07, 01 };
	int old_data_oid[] = { 0x2A, 0x86, 0x48, 0xC3, 0xFB, 0x4D, 0x01, 0x07, 0x01 };
	element *p = get_element(&quot;contentInfo&quot;, NULL);
	if (p == NULL) {
		printf(&quot;not found 'contentInfo'\n&quot;);
		return false;
	}
	if (m_content[p-&gt;begin + 1] != 0x09) {
		printf(&quot;length not match!\n&quot;);
		return false;
	}
	int *p_data = (type == 0 ? data_oid : old_data_oid);
	for (int i = 0; i &lt; 0x09; i++) {
		m_content[p-&gt;begin + 2 + i] = p_data[i];
	}

	bool ret = false;
	char file[256] = { 0 };
	if (apk_file == NULL) {
		strcpy(file, cert_file);
		strcat(file, &quot;.add&quot;);
		FILE *f = fopen(file, &quot;wb&quot;);
		if (f != NULL) {
			fwrite(m_content, m_length , 1, f);
			fclose(f);
		}
	}
	else {
		if (strlen(apk_file) &lt;= 4) {
			strcpy(file, apk_file);
			strcat(file, &quot;.apk&quot;);
		}
		else {
			strncpy(file, apk_file, strlen(apk_file) - 4);
			file[strlen(apk_file) - 4] = '\0';
			strcat(file, &quot;-change.apk&quot;);
		}
		ret = save_apk(m_content, m_length, file);
	}
	return ret;
	
}

/**
 *	证书文件添加内容
 *  data: 数据缓冲区
 *  len: 数据缓冲区长度
 *  tail: 添加数据缓冲区的位置，若为1，添加到末尾；为0，添加到ContentInfo中
 *  save_name: 修改后的保存名，可以为NULL, 若为NULL, example.apk会被保存为example-add.apk
 */
bool pkcs7::add_data(unsigned char *data, int len, int tail, const char *save_name)
{
	if (head == NULL || data == NULL || len == 0)
		return false;
	unsigned char *new_content = NULL; 
	int add_len;
	if (tail == 1) {
		add_len = len;
		new_content = (unsigned char *)malloc(sizeof(unsigned char)* (m_length + len));
		memcpy(new_content, m_content, m_length);
		memcpy(new_content + m_length, data, len);
	}
	else {
		element *p = get_element(&quot;contentInfo&quot;, NULL);
		if (p == NULL)
			return false;
		if (p-&gt;len != 0x0B) {
			printf(&quot;Already have data!\n&quot;);
			return false;
		}
		add_len = len;      //contentInfo.content - data 
		add_len += num_from_len(len); // contentInfo.content - lenbyte
		add_len += 1;      // contentInfo.content - tag
		add_len += num_from_len(add_len);	// optional - lenbyte
		add_len += 1;		//optional - tag
		
		int contentInfo_len = p-&gt;len + add_len;  //contentInfo
		add_len += num_from_len(contentInfo_len) - num_from_len(p-&gt;len); 
		p = get_element(&quot;content-&quot;, NULL);
		if (p == NULL) {
			return false;
		}
		int content_len = p-&gt;len + add_len;
		add_len += num_from_len(content_len) - num_from_len(p-&gt;len);
		p = get_element(&quot;contentType&quot;, NULL);
		if (p == NULL)
			return false;
		int optional_len = get_length(m_content[p-&gt;begin + p-&gt;len + 1], p-&gt;begin + p-&gt;len + 2);
		optional_len += add_len;
		add_len += num_from_len(optional_len) - num_from_len(optional_len - add_len);
		int total_len = get_length(m_content[1], 2);
		total_len += add_len;
		add_len += num_from_len(total_len) - num_from_len(total_len - add_len);
		new_content = (unsigned char *)malloc(sizeof(unsigned char)* (m_length + add_len));
		int i = 0;
		new_content[i++] = TAG_SEQUENCE;
		i += put_length(new_content + i, total_len);
		memcpy(new_content + i, m_content + p-&gt;begin - tag_offset(p), p-&gt;len + tag_offset(p));
		i += p-&gt;len + tag_offset(p);
		new_content[i++] = 0xA0;
		i += put_length(new_content + i, optional_len);
		new_content[i++] = TAG_SEQUENCE;
		i += put_length(new_content + i, content_len);
		p = get_element(&quot;version&quot;, NULL);
		if (p == NULL)
			return false;
		memcpy(new_content + i, m_content + p-&gt;begin - tag_offset(p), p-&gt;len + tag_offset(p));
		i += p-&gt;len + tag_offset(p);
		p = get_element(&quot;DigestAlgorithms&quot;, NULL);
		if (p == NULL)
			return false;
		memcpy(new_content + i, m_content + p-&gt;begin - tag_offset(p), p-&gt;len + tag_offset(p));
		i += p-&gt;len + tag_offset(p);
		new_content[i++] = TAG_SEQUENCE;
		i += put_length(new_content + i, contentInfo_len);
		p = get_element(&quot;contentInfo&quot;, NULL);
		if (p == NULL)
			return false;
		memcpy(new_content + i, m_content + p-&gt;begin, p-&gt;len);
		i += p-&gt;len;
		new_content[i++] = 0xA0;
		i += put_length(new_content + i, len + num_from_len(len) + 1);
		new_content[i++] = TAG_OCTETSTRING;
		i += put_length(new_content + i, len);
		memcpy(new_content + i, data, len);
		i += len;
		memcpy(new_content + i, m_content + p-&gt;begin + p-&gt;len, m_length - p-&gt;begin - p-&gt;len);
	}
	bool ret = false;
	char file[256] = { 0 };
	if (apk_file == NULL) {
		if (save_name == NULL) {
			strcpy(file, cert_file);
			strcat(file, &quot;.add&quot;);
		}
		else
			strcpy(file, save_name);
		FILE *f = fopen(file, &quot;wb&quot;);
		if (f != NULL) {
			fwrite(new_content, m_length + add_len, 1, f);
			fclose(f);
		}
	}
	else {
			if (save_name == NULL) {
				if (strlen(apk_file) &lt;= 4) {
					strcpy(file, apk_file);
					strcat(file, &quot;.apk&quot;);
				}
				else {
					strncpy(file, apk_file, strlen(apk_file) - 4);
					file[strlen(apk_file) - 4] = '\0';
					strcat(file, &quot;-add.apk&quot;);
				}
			}
			else
				strcpy(file, save_name);
			ret = save_apk(new_content, m_length + add_len, file);
		}
	free(new_content);
	return ret;
}
</code></pre>
<pre><code class="language-cpp">extern &quot;C&quot; void getApkSignMD5(char* apkPath, char* result);

void getApkSignMD5(char* apkPath, char* result)
{
    char name[512];
    strcpy(name, apkPath);
    pkcs7 test;
    if (test.open_file(name)) {
    	//test.print();
    	//test.change_contentType(1);
    	//test.add_data((unsigned char *)&quot;hello world&quot;, strlen(&quot;hello world&quot;), 0);
    	//printf(&quot;MD5: %s\n&quot;, test.get_MD5());
    	//result = test.get_MD5();
        strcpy(result, test.get_MD5());
        return;
    	//__android_log_print(ANDROID_LOG_ERROR, &quot;LOG_TAG&quot;,&quot;MD5: %s\n&quot;, test.get_MD5());
    	//return test.get_MD5();
    }
    strcpy(result, &quot;ewqqwer&quot;);
    //result = &quot;ewqqwer&quot;;
    //else return &quot;&quot;;
}
</code></pre>
<p>其中解压缩和计算MD5需要依赖第三方的具体实现。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Android NDK层校验签名（一）]]></title>
        <id>https://mylifelog.github.io/post/android-ndk-ceng-xiao-yan-qian-ming-yi</id>
        <link href="https://mylifelog.github.io/post/android-ndk-ceng-xiao-yan-qian-ming-yi">
        </link>
        <updated>2019-09-09T01:07:49.000Z</updated>
        <summary type="html"><![CDATA[<p>为防止别有用心的人将我们的apk文件修改后重新发布，我们需要对apk文件的证书进行校验。</p>
]]></summary>
        <content type="html"><![CDATA[<p>为防止别有用心的人将我们的apk文件修改后重新发布，我们需要对apk文件的证书进行校验。</p>
<!-- more -->
<p>具体原理是，在native层通过jni接口查找Java层的签名相关的方法，进而调用计算出apk的证书MD5。</p>
<p>具体代码如下：</p>
<pre><code class="language-cpp">    //获取到Context
    jobject context= jniGetApplication(env);
    jclass  activity = (*env)-&gt;GetObjectClass(env,context);
    // 得到 getPackageManager 方法的 ID
    jmethodID methodID_func = (*env)-&gt;GetMethodID(env,activity, &quot;getPackageManager&quot;, &quot;()Landroid/content/pm/PackageManager;&quot;);
    // 获得PackageManager对象
    jobject packageManager = (*env)-&gt;CallObjectMethod(env,context,methodID_func);
    jclass packageManagerclass = (*env)-&gt;GetObjectClass(env,packageManager);
    //得到 getPackageName 方法的 ID
    jmethodID methodID_pack = (*env)-&gt;GetMethodID(env,activity,&quot;getPackageName&quot;, &quot;()Ljava/lang/String;&quot;);
    //获取包名
    jstring name_str = (jstring)((*env)-&gt;CallObjectMethod(env,context, methodID_pack));
    // 得到 getPackageInfo 方法的 ID
    jmethodID methodID_pm = (*env)-&gt;GetMethodID(env,packageManagerclass,&quot;getPackageInfo&quot;, &quot;(Ljava/lang/String;I)Landroid/content/pm/PackageInfo;&quot;);
    // 获得应用包的信息
    jobject package_info = (*env)-&gt;CallObjectMethod(env,packageManager, methodID_pm, name_str, 64);
    // 获得 PackageInfo 类
    jclass package_infoclass = (*env)-&gt;GetObjectClass(env,package_info);
    // 获得签名数组属性的 ID
    jfieldID fieldID_signatures = (*env)-&gt;GetFieldID(env,package_infoclass,&quot;signatures&quot;, &quot;[Landroid/content/pm/Signature;&quot;);
    // 得到签名数组，待修改
    jobject signatur = (*env)-&gt;GetObjectField(env,package_info, fieldID_signatures);
    jobjectArray  signatures = (jobjectArray)(signatur);
    // 得到签名
    jobject signature = (*env)-&gt;GetObjectArrayElement(env,signatures, 0);
    // 获得 Signature 类，待修改
    jclass signature_clazz = (*env)-&gt;GetObjectClass(env,signature);
    //---获得签名byte数组
    jmethodID tobyte_methodId = (*env)-&gt;GetMethodID(env,signature_clazz, &quot;toByteArray&quot;, &quot;()[B&quot;);
    jbyteArray signature_byte = (jbyteArray) (*env)-&gt;CallObjectMethod(env,signature, tobyte_methodId);
    //把byte数组转成流
    jclass byte_array_input_class=(*env)-&gt;FindClass(env,&quot;java/io/ByteArrayInputStream&quot;);
    jmethodID init_methodId=(*env)-&gt;GetMethodID(env,byte_array_input_class,&quot;&lt;init&gt;&quot;,&quot;([B)V&quot;);
    jobject byte_array_input=(*env)-&gt;NewObject(env,byte_array_input_class,init_methodId,signature_byte);
    //实例化X.509
    jclass certificate_factory_class=(*env)-&gt;FindClass(env,&quot;java/security/cert/CertificateFactory&quot;);
    jmethodID certificate_methodId=(*env)-&gt;GetStaticMethodID(env,certificate_factory_class,&quot;getInstance&quot;,&quot;(Ljava/lang/String;)Ljava/security/cert/CertificateFactory;&quot;);
    jstring x_509_jstring=(*env)-&gt;NewStringUTF(env,&quot;X.509&quot;);
    jobject cert_factory=(*env)-&gt;CallStaticObjectMethod(env,certificate_factory_class,certificate_methodId,x_509_jstring);
    //certFactory.generateCertificate(byteIn);
    jmethodID certificate_factory_methodId=(*env)-&gt;GetMethodID(env,certificate_factory_class,&quot;generateCertificate&quot;,(&quot;(Ljava/io/InputStream;)Ljava/security/cert/Certificate;&quot;));
    jobject x509_cert=(*env)-&gt;CallObjectMethod(env,cert_factory,certificate_factory_methodId,byte_array_input);

    jclass x509_cert_class=(*env)-&gt;GetObjectClass(env,x509_cert);
    jmethodID x509_cert_methodId=(*env)-&gt;GetMethodID(env,x509_cert_class,&quot;getEncoded&quot;,&quot;()[B&quot;);
    jbyteArray cert_byte=(jbyteArray)(*env)-&gt;CallObjectMethod(env,x509_cert,x509_cert_methodId);

    //MessageDigest.getInstance(&quot;SHA1&quot;)
    jclass message_digest_class=(*env)-&gt;FindClass(env,&quot;java/security/MessageDigest&quot;);
    jmethodID methodId=(*env)-&gt;GetStaticMethodID(env,message_digest_class,&quot;getInstance&quot;,&quot;(Ljava/lang/String;)Ljava/security/MessageDigest;&quot;);
    //如果取SHA1则输入SHA1
    //jstring sha1_jstring=(*env)-&gt;NewStringUTF(env,&quot;SHA1&quot;);
    jstring sha1_jstring=(*env)-&gt;NewStringUTF(env,&quot;MD5&quot;);
    jobject sha1_digest=(*env)-&gt;CallStaticObjectMethod(env,message_digest_class,methodId,sha1_jstring);
    //sha1.digest (certByte)
    methodId=(*env)-&gt;GetMethodID(env,message_digest_class,&quot;digest&quot;,&quot;([B)[B&quot;);
    jbyteArray sha1_byte=(jbyteArray)(*env)-&gt;CallObjectMethod(env,sha1_digest,methodId,cert_byte);
    //toHexString
    jsize array_size=(*env)-&gt;GetArrayLength(env,sha1_byte);
    jbyte* sha1 =(*env)-&gt;GetByteArrayElements(env,sha1_byte,NULL);
    char hex_sha[array_size*2+1];
    int i;
    for (i = 0;i&lt;array_size;++i) {
        hex_sha[2*i]=HexCode[((unsigned char)sha1[i])/16];
        hex_sha[2*i+1]=HexCode[((unsigned char)sha1[i])%16];
    }
    hex_sha[array_size*2]='\0';
</code></pre>
<p>但是这个方法有个缺点，如果别人在Java层重写一下关键的方法，对获取证书内容的部分篡改，便会使我们的校验失败。具体可以看github上的kstool项目和MT管理器移除证书检验部分。</p>
<p>针对这个情况，我们在下一篇讲如何应对。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[李宏毅《机器学习》学习笔记 HW1]]></title>
        <id>https://mylifelog.github.io/post/li-hong-yi-lesslessji-qi-xue-xi-greatergreater-xue-xi-bi-ji-hw1</id>
        <link href="https://mylifelog.github.io/post/li-hong-yi-lesslessji-qi-xue-xi-greatergreater-xue-xi-bi-ji-hw1">
        </link>
        <updated>2019-08-14T09:41:49.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="1作业内容">1.作业内容：</h2>
<p>本次作业使用豐原站的觀測記錄，分成 train set 跟 test set，train set 是豐原站每個月的前20天所有資料，test set則是從豐原站剩下的資料中取樣出來。</p>
]]></summary>
        <content type="html"><![CDATA[<h2 id="1作业内容">1.作业内容：</h2>
<p>本次作业使用豐原站的觀測記錄，分成 train set 跟 test set，train set 是豐原站每個月的前20天所有資料，test set則是從豐原站剩下的資料中取樣出來。</p>
<!-- more -->
<p>train.csv:每個月前20天每個小時的氣象資料(每小時有18種測資)。共12個月。 test.csv:從剩下的資料當中取樣出連續的10小時為一筆，前九小時的所有觀測數據當作feature，第十小時的PM2.5當作answer。一共取出240筆不重複的 test data，請根據feauure預測這240筆的PM2.5。</p>
<h2 id="2思路分析">2.思路分析：</h2>
<p>由于课程要求按线性回归处理，对该问题，分三步：<br>
step1：模型假设，选择模型框架（线性模型）<br>
step2：模型评估，如何判断众多模型的好坏（损失函数）<br>
step3：模型优化，如何筛选最优的模型（梯度下降）</p>
<h2 id="3处理步骤">3.处理步骤</h2>
<h3 id="31建立线性模型">3.1建立线性模型</h3>
<p>该线性模型可表述为：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi><mo>=</mo><msub><mi>θ</mi><mn>0</mn></msub><mo>+</mo><msub><mi>θ</mi><mn>1</mn></msub><msub><mi>x</mi><mn>0</mn></msub><mo>+</mo><msub><mi>θ</mi><mn>2</mn></msub><msub><mi>x</mi><mn>1</mn></msub><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">y=\theta_{0}+\theta_{1}x_{0}+\theta_{2}x_{1}...</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span></span></span></span>,  即：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi><mo>=</mo><msup><mi>θ</mi><mi>T</mi></msup><mi>X</mi></mrow><annotation encoding="application/x-tex">y=\theta^{T}X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span></span></span></span> 。问题即转化为使用数据训练<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>θ</mi></mrow><annotation encoding="application/x-tex">\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span></span>矩阵，并预测。<br>
对数据处理，一个显然的想法是将每天第9-23小时的PM2.5作为训练输入的y，每个y的前9列共189个数据作为训练输入的X，那么共有 15 * 20 * 12 = 3600组数据可以训练，对每组X前面加一列1, 即可完成bias的添加。</p>
<h3 id="32-设计损失函数">3.2 设计损失函数</h3>
<p>为了得到目标线性方程，我们只需确定上式中的ΘT，同时为了确定所选定的的ΘT效果好坏，通常情况下，我们使用一个损失函数(loss function)或者说是错误函数(error function)来评估h(x)函数的好坏。该错误函数如下所示：<br>
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>J</mi><mo>(</mo><mi>θ</mi><mo>)</mo><mo>=</mo><mfrac><mn>1</mn><mrow><mn>2</mn><mi>m</mi></mrow></mfrac><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></msubsup><mo>(</mo><msub><mi>h</mi><mi>θ</mi></msub><mo>(</mo><msup><mi>x</mi><mi>i</mi></msup><mo>)</mo><mo>−</mo><msup><mi>y</mi><mi>i</mi></msup><msup><mo>)</mo><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">J(\theta)=\frac{1}{2m}\sum_{i=1}^{m}(h_{\theta}(x^{i})-y^{i})^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.09618em;">J</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathdefault mtight">m</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.0746639999999998em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><br>
其中m表示batch的大小，上标i表示batch中的第i组数据。</p>
<p>对上式简化后用代码如下表示：</p>
<pre><code class="language-python">def J(theta, X_b, y):
    try:
        return np.sqrt(np.sum((y - X_b.dot(theta)) ** 2) / len(y))
    except:
        return float('inf')
</code></pre>
<h3 id="33-梯度下降算法">3.3 梯度下降算法</h3>
<p>梯度下降法中的梯度方向由上式对<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>θ</mi></mrow><annotation encoding="application/x-tex">\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span></span>的偏导数确定，由于求的是极小值，因此梯度方向是偏导数的反方向。<br>
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>θ</mi><mi>J</mi></msub><mo>=</mo><msub><mi>θ</mi><mi>J</mi></msub><mo>−</mo><mi>l</mi><mi>n</mi><mo>∗</mo><mfrac><mi mathvariant="normal">∂</mi><mrow><mi mathvariant="normal">∂</mi><msub><mi>θ</mi><mi>j</mi></msub></mrow></mfrac><mi>J</mi><mo>(</mo><mi>θ</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">\theta_{J} = \theta_{J} - ln*\frac{\partial }{\partial \theta_{j}}J(\theta)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.09618em;">J</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.09618em;">J</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.4224279999999998em;vertical-align:-0.5423199999999999em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:-0.02778em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5423199999999999em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathdefault" style="margin-right:0.09618em;">J</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span></span></span></span><br>
其中<strong>ln</strong>为学习速率，不能过大也不能过小，实际中使用adagrad方法有较好的效果。</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mi mathvariant="normal">∂</mi><mrow><mi mathvariant="normal">∂</mi><msub><mi>θ</mi><mi>j</mi></msub></mrow></mfrac><mi>J</mi><mo>(</mo><mi>θ</mi><mo>)</mo><mo>=</mo><mfrac><mn>1</mn><mrow><mn>2</mn><mi>m</mi></mrow></mfrac><mfrac><mi mathvariant="normal">∂</mi><mrow><mi mathvariant="normal">∂</mi><msub><mi>θ</mi><mi>j</mi></msub></mrow></mfrac><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></msubsup><mo>(</mo><msub><mi>h</mi><mi>θ</mi></msub><mo>(</mo><msup><mi>x</mi><mi>i</mi></msup><mo>)</mo><mo>−</mo><msup><mi>y</mi><mi>i</mi></msup><msup><mo>)</mo><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">\frac{\partial }{\partial \theta_{j}}J(\theta)=\frac{1}{2m}\frac{\partial }{\partial \theta_{j}}\sum_{i=1}^{m}(h_{\theta}(x^{i})-y^{i})^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.4224279999999998em;vertical-align:-0.5423199999999999em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:-0.02778em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5423199999999999em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathdefault" style="margin-right:0.09618em;">J</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.4224279999999998em;vertical-align:-0.5423199999999999em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathdefault mtight">m</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:-0.02778em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5423199999999999em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.0746639999999998em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mi mathvariant="normal">∂</mi><mrow><mi mathvariant="normal">∂</mi><msub><mi>θ</mi><mi>j</mi></msub></mrow></mfrac><mi>J</mi><mo>(</mo><mi>θ</mi><mo>)</mo><mo>=</mo><mfrac><mn>1</mn><mi>m</mi></mfrac><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></msubsup><mo>(</mo><msub><mi>h</mi><mi>θ</mi></msub><mo>(</mo><msup><mi>x</mi><mi>i</mi></msup><mo>)</mo><mo>−</mo><msup><mi>y</mi><mi>i</mi></msup><mo>)</mo><mfrac><mi mathvariant="normal">∂</mi><mrow><mi mathvariant="normal">∂</mi><msub><mi>θ</mi><mi>j</mi></msub></mrow></mfrac><mo>(</mo><msub><mi>h</mi><mi>θ</mi></msub><mo>(</mo><msup><mi>x</mi><mi>i</mi></msup><mo>)</mo><mo>−</mo><msup><mi>y</mi><mi>i</mi></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">\frac{\partial }{\partial \theta_{j}}J(\theta)=\frac{1}{m} \sum_{i=1}^{m} (h_{\theta}(x^{i})-y^{i})\frac{\partial }{\partial \theta_{j}} (h_{\theta}(x^{i})-y^{i})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.4224279999999998em;vertical-align:-0.5423199999999999em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:-0.02778em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5423199999999999em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathdefault" style="margin-right:0.09618em;">J</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.4224279999999998em;vertical-align:-0.5423199999999999em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:-0.02778em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5423199999999999em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.0746639999999998em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mi mathvariant="normal">∂</mi><mrow><mi mathvariant="normal">∂</mi><msub><mi>θ</mi><mi>j</mi></msub></mrow></mfrac><mi>J</mi><mo>(</mo><mi>θ</mi><mo>)</mo><mo>=</mo><mfrac><mn>1</mn><mi>m</mi></mfrac><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></msubsup><mo>(</mo><msub><mi>h</mi><mi>θ</mi></msub><mo>(</mo><msup><mi>x</mi><mi>i</mi></msup><mo>)</mo><mo>−</mo><msup><mi>y</mi><mi>i</mi></msup><mo>)</mo><msubsup><mi>x</mi><mi>j</mi><mi>i</mi></msubsup></mrow><annotation encoding="application/x-tex">\frac{\partial }{\partial \theta_{j}}J(\theta)=\frac{1}{m}\sum_{i=1}^{m} (h_{\theta}(x^{i})-y^{i})x_{j}^{i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.4224279999999998em;vertical-align:-0.5423199999999999em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:-0.02778em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5423199999999999em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathdefault" style="margin-right:0.09618em;">J</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.219436em;vertical-align:-0.394772em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-2.441336em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.394772em;"><span></span></span></span></span></span></span></span></span></span></p>
<p>本次任务中，我们每次训练都使用了整个样本集，样本集的大小为m，因此我们称该梯度下降算法为批量梯度下降算法(batch gradient descent)。</p>
<p>使用代码表示如下：</p>
<pre><code class="language-python"># 对损失函数求导
def dJ(theta, X_b, y):
    return X_b.T.dot(X_b.dot(theta) - y) * 2. / len(y)
</code></pre>
<h2 id="4可以优化的部分">4.可以优化的部分</h2>
<h3 id="41-数据部分">4.1 数据部分</h3>
<p>数据部分，我们使用了每天前的15组数据进行处理，实际上给的数据每个月前20天是连续的，每天24小时也是连续的，那么我们就可以将前一天和后一天凌晨的数据连接起来，进一步扩充数据集，降低损失函数提高精度。</p>
<h3 id="42-使用adagrad调节学习速率">4.2 使用adagrad调节学习速率</h3>
<p><img src="https://mylifelog.github.io/post-images/1565783199080.png" alt=""><br>
举一个简单的思想：随着次数的增加，通过一些因子来减少学习率。通常刚开始，初始点会距离最低点比较远，所以使用大一点的学习率update好几次参数之后呢，比较靠近最低点了，此时减少学习率比如：<br>
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>η</mi><mi>t</mi></msup><mo>=</mo><mfrac><msup><mi>η</mi><mi>t</mi></msup><msqrt><mrow><mi>t</mi><mo>+</mo><mn>1</mn></mrow></msqrt></mfrac></mrow><annotation encoding="application/x-tex">\eta^t =\frac{\eta^t}{\sqrt{t+1}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9879959999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">η</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7935559999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.5933479999999998em;vertical-align:-0.5379999999999999em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.055348em;"><span style="top:-2.580174em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord sqrt mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8711800000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight" style="padding-left:0.833em;"><span class="mord mathdefault mtight">t</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span><span style="top:-2.83118em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail mtight" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.16881999999999997em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">η</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8703428571428571em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">t</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5379999999999999em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p>
<p>学习率不能是一个值通用所有特征，不同的参数需要不同的学习率, adagrad:<br>
<img src="https://mylifelog.github.io/post-images/1565783451675.png" alt=""><br>
化简之后：<br>
<img src="https://mylifelog.github.io/post-images/1565783461727.png" alt=""><br>
重点理解，分母二次表示不希望参数变化太过剧烈</p>
<h3 id="最后附训练测试代码如下">最后，附训练测试代码如下：</h3>
<pre><code class="language-python">
import numpy as np

#Load the dataset
rawData = np.loadtxt('../data/train.csv', dtype='str', delimiter=',', usecols=np.arange(3, 27, 1))
print(rawData.shape)
ItemNum = 18

train_x = []
train_y = []

#每18行读一次，将读到的18行数据每9列作为X，下一列的PM2.5作为Y
for i in range(1, int(len(rawData)), ItemNum):
    observ = rawData[i:i+ItemNum]
    #第9-23列PM2.5作为Y，每个Y的前9列所有 9*18 个参数作为X
    for j in range(9, len(observ[0])):
        #取每9列 9*18个参数作为X
        train_x.append(np.array(observ[:, j-9:j]).reshape(9*18))
        #下一列的PM2.5作为Y
        train_y.append(observ[9, j])

#数据格式转换
train_x = np.array(train_x)
train_x[train_x == 'NR'] = '0'
train_x = train_x.astype('float')
train_y = np.array(train_y)
train_y = train_y.astype('float')

#初始化参数矩阵
theta = np.zeros(train_x.shape[1]+1)
lr = 200
iteration = 100000

batch_num = 3600

# 定义损失函数(Root mean square)
def J(theta, X_b, y):
    try:
        return np.sqrt(np.sum((y - X_b.dot(theta)) ** 2) / len(y))
    except:
        return float('inf')

# 对损失函数求导
def dJ(theta, X_b, y):
    return X_b.T.dot(X_b.dot(theta) - y) * 2. / len(y)

sum_g_sq = np.zeros(theta.shape[0])
for i in range(iteration):
    for n in range(0, len(train_x), batch_num):
        #对数据集添加Bias
        X_b = np.hstack([np.ones((len(train_x[n:n+batch_num]), 1)), train_x[n:n+batch_num]])
        y_bat = train_y[n:n+batch_num]
        #计算loss
        L = J(theta, X_b, y_bat)
        #计算梯度矩阵
        grad = dJ(theta, X_b, y_bat)
        #使用AdaGrad计算lengingRate: ln除以历史梯度平方和开根号
        sum_g_sq += grad**2
        ada_lr = lr * 1./np.sqrt(sum_g_sq)
        theta = theta - ada_lr*grad
        if i % 500 == 0:
            print(&quot;T=&quot;,i)
            print(&quot;Loss:&quot;,L)
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://mylifelog.github.io/post/hello-gridea</id>
        <link href="https://mylifelog.github.io/post/hello-gridea">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="http://hvenotes.fehey.com/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>𝖶𝗂𝗇𝖽𝗈𝗐𝗌</strong> 或 <strong>𝖬𝖺𝖼𝖮𝖲</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>